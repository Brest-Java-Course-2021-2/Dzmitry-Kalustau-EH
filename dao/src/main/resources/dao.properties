SQL_ALL_CATEGORIES = SELECT c.category_id, c.category_name FROM category c ORDER BY c.category_id
SQL_CREATE_CATEGORY = INSERT INTO category(category_id, category_name) VALUES (:categoryId, :categoryName)
SQL_CHECK_UNIQUE_CATEGORY_NAME = SELECT count(c.category_name) FROM category c WHERE lower(c.category_name) = lower(:categoryName)
SQL_SELECT_COUNT = SELECT count(*) FROM category
SQL_UPDATE_CATEGORY = UPDATE category SET category_name = :categoryName WHERE category_id = :categoryId
SQL_CATEGORY_BY_ID = SELECT c.category_id, c.category_name FROM category c WHERE c.category_id = :categoryId
SQL_DELETE_CATEGORY_BY_ID = DELETE FROM category WHERE category_id = :categoryId

SQL_ALL_EXPENSES = SELECT * FROM expense
SQL_EXPENSE_BY_ID = SELECT * FROM expense WHERE expense_id = :expenseId
SQL_CREATE_EXPENSE = INSERT INTO expense(expense_id, date, category_id, price) VALUES (:expense_id, :date, :category_id, :price)
SQL_UPDATE_EXPENSE = UPDATE expense SET category_id = :categoryId, price = :price WHERE expense_id = :expenseId
SQL_DELETE_EXPENSE_BY_ID = DELETE FROM expense WHERE expense_id = :expenseId
SQL_SELECT_COUNT_EXPENSES = SELECT count(*) FROM expense

SQL_FIND_ALL_SUM_OF_EXPENSES = SELECT c.category_name AS categoryName, sum(e.price) AS sumOfExpense FROM expense e INNER JOIN category c ON e.category_id = c.category_id GROUP BY e.category_id ORDER BY sumOfExpense
SQL_FIND_SUM_OF_EXPENSES_BETWEEN_DATES = SELECT c.category_name AS categoryName, sum(e.price) AS sumOfExpense FROM expense e INNER JOIN category c ON e.category_id = c.category_id WHERE date BETWEEN :dateFrom AND :dateTo GROUP BY e.category_id ORDER BY sumOfExpense
